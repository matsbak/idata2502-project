name: Build and deploy an app to AKS with Kompose

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  # Azure environment variables
  AZURE_CONTAINER_REGISTRY: "todoappreg-hrbvbtdhavd8dpcu"
  AZURE_CONTAINER_REGISTRY_NAME: "todoappreg"
  FRONTEND_CONTAINER_NAME: "frontend"
  BACKEND_CONTAINER_NAME: "backend"
  RESOURCE_GROUP: "idata2502Project"
  CLUSTER_NAME: "todoAppCluster"
  DOCKER_COMPOSE_FILE_PATH: "compose.yaml"

  # Container environment variables
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL_PROD }}

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Builds and pushes images up to your Azure Container Registry
      - name: Build and push images to ACR
        run: |
          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.FRONTEND_CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY_NAME }} -g ${{ env.RESOURCE_GROUP }} --file ./frontend/Dockerfile ./frontend
          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.BACKEND_CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY_NAME }} -g ${{ env.RESOURCE_GROUP }} --file ./backend/Dockerfile ./backend

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage]
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      # Installs Kompose
      - name: Install Kompose
        run: |
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.32.0/kompose-linux-amd64 -o kompose
          chmod +x kompose
          sudo mv kompose /usr/local/bin/kompose
      
      - name: Create manifest files
        run: |
          kompose convert -f ${{ env.DOCKER_COMPOSE_FILE_PATH }} -o ./manifests

      # Switches deprecated API versions in manifest files with updated versions
      - name: Fix deprecated API versions
        run: |
          find ./manifests -name '*.yaml' -exec sed -i 's|extensions/v1beta1|apps/v1|g' {} +

      # Deploys application based on manifest files from previous step
      - name: Deploy application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ./manifests
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.FRONTEND_CONTAINER_NAME }}:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.BACKEND_CONTAINER_NAME }}:${{ github.sha }}
